// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        Int      @id @default(autoincrement())
  name      String
  surname   String
  password  String
  email     String   @unique
  number    String
  department Department 
  company   String 
  courses   Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Learner {
  id           Int           @id @default(autoincrement())
  name         String
  surname      String
  email        String        @unique
  number       String
  department   Department?
  company      String 
  enrollments  Enrollment[] // ✅ Now a real relation
  progress     Progress[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}


enum Department {
  marketing
  it
  learning
}

model Course {
  id           Int           @id @default(autoincrement())
  name         String
  description  String
  coverImage   String?
  admin        Admin         @relation(fields: [adminId], references: [id])
  adminId      Int
  lessons      Lesson[]      
  enrollments  Enrollment[]  
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}


model Lesson {
  id          Int       @id @default(autoincrement())
  title       String
  content     String
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    Int
  quiz        Quiz?     
  day         Int       // Day in course (e.g., 1, 2, 3)
  progress    Progress[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Quiz {
  id          Int       @id @default(autoincrement())
  lessonId    Int       @unique
  lesson      Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  question    String
  options     Json      // Store options as JSON array, e.g., ["A", "B", "C"]
  correctOption String
  responses   Progress[]
}

model Progress {
  id          Int       @id @default(autoincrement())
  learnerId   Int
  lessonId    Int
  quizId      Int?
  learner     Learner   @relation(fields: [learnerId], references: [id], onDelete: Cascade)
  lesson      Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz        Quiz?     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  completed   Boolean   @default(false)
  quizAnswer  String?
  isCorrect   Boolean?
  completedAt DateTime? @default(now())

  @@unique([learnerId, lessonId]) // ✅ One progress per lesson
}


model Enrollment {
  id         Int      @id @default(autoincrement())
  learnerId  Int
  courseId   Int
  learner    Learner  @relation(fields: [learnerId], references: [id], onDelete: Cascade)
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrolledAt DateTime @default(now())

  @@unique([learnerId, courseId]) // prevent duplicate enrollments
}


model Message {
  id           Int           @id @default(autoincrement())
  messageId    String        @unique // WhatsApp message ID - now unique
  from         String?        // Sender's number
  to           String?       // Recipient's number
  body         String?        // Message content
  type         String?        // Message type (text, image, etc.)
  direction    MessageDirection? // outgoing or incoming
  status       MessageStatus? // sent, delivered, read, failed, received, etc.
  timestamp    DateTime?      // When the message was sent/received
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

enum MessageStatus {
  sent
  delivered
  read
  failed
  received
  other
}

enum MessageDirection {
  outgoing
  incoming
}